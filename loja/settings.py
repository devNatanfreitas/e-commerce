"""
Django settings for loja project.

Generated by 'django-admin startproject' using Django 2.2.4.
"""

import os
from dotenv import load_dotenv
from django.contrib.messages import constants

# Carrega variáveis do .env (em dev local)
load_dotenv()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

#
# Segurança
#

# Chave secreta via ENV, com fallback inseguro para dev
SECRET_KEY = os.getenv('SECRET_KEY', 'inseguro-para-dev')

# DEBUG via ENV (deve ser 'False' em produção)
DEBUG = os.getenv('DEBUG', 'False') == 'True'

# Hosts permitidos: inclui localhost, e-commerce-toui.onrender.com e quaisquer via ENV
ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '127.0.0.1,localhost').split(',')
#
# Aplicativos instalados
#
INSTALLED_APPS = [
    'produto',
    'pedido',
    'perfil',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'crispy_bootstrap4',
    'crispy_forms',
    'storages',  
]

# Carrega debug_toolbar só em dev
if DEBUG:
    INSTALLED_APPS += ['debug_toolbar']

CRISPY_TEMPLATE_PACK = 'bootstrap4'

#
# Middleware
#
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]



# Adiciona toolbar em dev
if DEBUG:
    MIDDLEWARE.insert(0, 'debug_toolbar.middleware.DebugToolbarMiddleware')

#
# URLs e WSGI
#
ROOT_URLCONF = 'loja.urls'
WSGI_APPLICATION = 'loja.wsgi.application'

#
# Templates
#
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

#
# Banco de dados (SQLite)
#
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST'),
        'PORT': os.getenv('DB_PORT'),
    }
}


#
# Validação de senhas
#
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

#
# Internacionalização
#
LANGUAGE_CODE = 'pt-BR'
TIME_ZONE = 'America/Sao_Paulo'
USE_I18N = True
USE_L10N = True
USE_TZ = True

#
# Arquivos estáticos e mídia
#
STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

if not DEBUG:
    # Configuração para Supabase Storage

    
    # Configurações AWS (compatível com Supabase)
    AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')
    AWS_S3_ENDPOINT_URL = os.getenv('AWS_S3_ENDPOINT_URL')
    
    # Configurações específicas para Supabase
    AWS_S3_REGION_NAME = 'us-east-1'  # Região padrão do Supabase
    AWS_S3_SIGNATURE_VERSION = 's3v4'
    AWS_S3_FILE_OVERWRITE = False
    AWS_S3_VERIFY = True
    AWS_DEFAULT_ACL = None  # Supabase gerencia ACL automaticamente
    AWS_S3_OBJECT_PARAMETERS = {
        'CacheControl': 'max-age=86400',
    }
    
    # URL correta para Supabase Storage
    MEDIA_URL = f"{AWS_S3_ENDPOINT_URL}/object/public/{AWS_STORAGE_BUCKET_NAME}/"


#
# Mensagens
#
MESSAGE_TAGS = {
    constants.DEBUG: 'alert-info',
    constants.ERROR: 'alert-danger',
    constants.INFO: 'alert-info',
    constants.SUCCESS: 'alert-success',
    constants.WARNING: 'alert-warning',
}

#
# Sessão
#
SESSION_COOKIE_AGE = 60 * 60 * 24 * 7  # 7 dias
SESSION_SAVE_EVERY_REQUEST = False

#
# Debug Toolbar
#
if DEBUG:
    INTERNAL_IPS = ['127.0.0.1']
